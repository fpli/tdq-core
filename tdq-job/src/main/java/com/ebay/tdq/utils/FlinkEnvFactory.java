package com.ebay.tdq.utils;

import static com.ebay.sojourner.common.util.Property.CHECKPOINT_INTERVAL_MS;
import static com.ebay.sojourner.common.util.Property.CHECKPOINT_MAX_CONCURRENT;
import static com.ebay.sojourner.common.util.Property.CHECKPOINT_MIN_PAUSE_BETWEEN_MS;
import static com.ebay.sojourner.common.util.Property.CHECKPOINT_TIMEOUT_MS;
import static com.ebay.sojourner.common.util.Property.TOLERATE_FAILURE_CHECKPOINT_NUMBER;
import static com.ebay.sojourner.flink.common.FlinkEnvUtils.getInteger;

import com.ebay.sojourner.flink.common.FlinkEnvUtils;
import com.ebay.sojourner.flink.state.StateBackendFactory;
import com.ebay.tdq.common.env.TdqEnv;
import com.ebay.tdq.common.model.TdqMetric;
import com.ebay.tdq.config.TdqConfig;
import com.ebay.tdq.config.TransformationConfig;
import com.ebay.tdq.expressions.Expression;
import com.ebay.tdq.rules.PhysicalPlan;
import com.esotericsoftware.kryo.serializers.JavaSerializer;
import lombok.extern.slf4j.Slf4j;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.configuration.TaskManagerOptions;
import org.apache.flink.streaming.api.CheckpointingMode;
import org.apache.flink.streaming.api.TimeCharacteristic;
import org.apache.flink.streaming.api.environment.CheckpointConfig;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

/**
 * @author juntzhang
 */
@Slf4j
public class FlinkEnvFactory {

  public static StreamExecutionEnvironment create(TdqEnv tdqEnv) {
    StreamExecutionEnvironment env;
    if (tdqEnv.isLocal()) {
      env = createLocal();
    } else {
      env = FlinkEnvUtils.prepare();
    }
    return env;
  }

  public static StreamExecutionEnvironment createLocal() {
    Configuration conf = new Configuration();
    conf.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, 16);
    conf.setInteger("rest.port", 18080);
    final StreamExecutionEnvironment env =
        StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(conf);
    env.setParallelism(1);
    env.registerTypeWithKryoSerializer(TdqEnv.class, JavaSerializer.class);
    env.registerTypeWithKryoSerializer(Expression.class, JavaSerializer.class);
    env.registerTypeWithKryoSerializer(PhysicalPlan.class, JavaSerializer.class);
    env.registerTypeWithKryoSerializer(TdqMetric.class, JavaSerializer.class);
    env.registerTypeWithKryoSerializer(TransformationConfig.class, JavaSerializer.class);
    env.registerTypeWithKryoSerializer(TdqConfig.class, JavaSerializer.class);
    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
    // env.setRestartStrategy(org.apache.flink.api.common.restartstrategy.RestartStrategies.noRestart());
    env.getConfig().disableAutoGeneratedUIDs();

    env.enableCheckpointing(getInteger(CHECKPOINT_INTERVAL_MS));
    CheckpointConfig checkpointConfig = env.getCheckpointConfig();
    checkpointConfig.setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);
    checkpointConfig.setMinPauseBetweenCheckpoints(getInteger(CHECKPOINT_MIN_PAUSE_BETWEEN_MS));//2min
    checkpointConfig.setCheckpointTimeout(getInteger(CHECKPOINT_TIMEOUT_MS));//15min
    checkpointConfig.setMaxConcurrentCheckpoints(getInteger(CHECKPOINT_MAX_CONCURRENT));
    checkpointConfig.setTolerableCheckpointFailureNumber(getInteger(TOLERATE_FAILURE_CHECKPOINT_NUMBER));

    env.setStateBackend(StateBackendFactory.getStateBackend(StateBackendFactory.ROCKSDB));

    return env;
  }
}
